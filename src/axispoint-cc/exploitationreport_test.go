package main

import (
	"reflect"
	"testing"

	"github.com/hyperledger/fabric/core/chaincode/shim"
)

// ********************************* Mock Data *********************************
var exploitationReportSingle_in = `[{"source":"M86321","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":156062,"exploitationDate":"201811","amount":"36518.51","usageType":"SDIGM","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","territory":"AUS"}]`
var exploitationReportSingle_out = `{"docType":"EXPLOITATIONREPORT","source":"M86321","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":156062,"exploitationDate":"201811","amount":"36518.51","usageType":"SDIGM","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","territory":"AUS"}`

var exploitationReportMultiple_in = `[{"source":"M86321","songTitle":"LOWDOWN","writerName":"DAVID PAICH, BOZ SCAGGS","isrc":"00032654","units":185612,"exploitationDate":"201811","amount":"43433.21","usageType":"SDIGM","exploitationReportUUID":"03c97ae0-950a-37cd-a1f2-c2b0afc728e7","territory":"AUS"},{"source":"M92108","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":124105,"exploitationDate":"201811","amount":"29040.57","usageType":"SDIGP","exploitationReportUUID":"095cb0b1-2aec-360b-9dd1-ce1d023286e1","territory":"AUS"}]`
var exploitationReportMultiple_out1 = `{"docType":"EXPLOITATIONREPORT","source":"M86321","songTitle":"LOWDOWN","writerName":"DAVID PAICH, BOZ SCAGGS","isrc":"00032654","units":185612,"exploitationDate":"201811","amount":"43433.21","usageType":"SDIGM","exploitationReportUUID":"03c97ae0-950a-37cd-a1f2-c2b0afc728e7","territory":"AUS"}`
var exploitationReportMultiple_out2 = `{"docType":"EXPLOITATIONREPORT","source":"M92108","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":124105,"exploitationDate":"201811","amount":"29040.57","usageType":"SDIGP","exploitationReportUUID":"095cb0b1-2aec-360b-9dd1-ce1d023286e1","territory":"AUS"}`

// *****************************************************************************
func MockGetExploitationReportResponse(functionName string) []byte {
	switch functionName {
	case "Test_AddExploitationReports_Single":
		return []byte(`{"successCount":1,"failureCount":0,"exploitationReports":[{"exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","message":"","success":true}]}`)
	case "Test_AddExploitationReports_Multiple":
		return []byte(`{"successCount":2,"failureCount":0,"exploitationReports":[{"exploitationReportUUID":"03c97ae0-950a-37cd-a1f2-c2b0afc728e7","message":"","success":true},{"exploitationReportUUID":"095cb0b1-2aec-360b-9dd1-ce1d023286e1","message":"","success":true}]}`)
	default:
		return []byte("[]")
	}
}

func Test_ResetLedger(t *testing.T) {
	scc := new(AxispointChaincode)
	stub := shim.NewMockStub("AxispointChaincode", scc)

	// Init
	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

	_, err := checkInvoke(t, stub, [][]byte{[]byte("resetLedger"), []byte(exploitationReportSingle1_in)})
	if err != nil {
		t.Fatalf(err.Error())
	}

	//verify # of records in the ledger are 0.
}

func Test_AddExploitationReports_Single(t *testing.T) {
	scc := new(AxispointChaincode)
	stub := shim.NewMockStub("AxispointChaincode", scc)

	// Init
	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

	actual, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle1_in)})
	if err != nil {
		t.Fatalf(err.Error())
	}

	// Check State for Transaction
	var exploitationReportUUID = "1cfbdb47-cca7-3eca-b73e-0d6c478a4eff"
	checkState(t, stub, exploitationReportUUID, exploitationReportSingle_out)

	expected := MockGetExploitationReportResponse("Test_AddExploitationReports_Single")
	if !reflect.DeepEqual(expected, actual) {
		t.Fatalf("Actual response is not equal to expected response")
	}
}

func Test_AddExploitationReports_Multiple(t *testing.T) {
	scc := new(AxispointChaincode)
	stub := shim.NewMockStub("AxispointChaincode", scc)

	// Init
	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

	actual, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportMultiple_in)})
	if err != nil {
		t.Fatalf(err.Error())
	}

	// Check State for first Exploitation Report
	var exploitationReportUUID = "03c97ae0-950a-37cd-a1f2-c2b0afc728e7"
	checkState(t, stub, exploitationReportUUID, exploitationReportMultiple_out1)

	// Check State for second Exploitation Report
	exploitationReportUUID = "095cb0b1-2aec-360b-9dd1-ce1d023286e1"
	checkState(t, stub, exploitationReportUUID, exploitationReportMultiple_out2)

	expected := MockGetExploitationReportResponse("Test_AddExploitationReports_Multiple")
	if !reflect.DeepEqual(expected, actual) {
		t.Fatalf("Actual response is not equal to expected response")
	}
}

//Test the Edge cases
func Test_AddExploitationReports_Empty1(t *testing.T) {
	scc := new(AxispointChaincode)
	stub := shim.NewMockStub("AxispointChaincode", scc)

	// Init
	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(`[]`)})
	if err != nil {
		t.Fatalf(err.Error())
	}
}

//Test the Edge cases
func Test_AddExploitationReports_Empty2(t *testing.T) {
	scc := new(AxispointChaincode)
	stub := shim.NewMockStub("AxispointChaincode", scc)

	// Init
	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte("")})
	if err != nil {
		t.Fatalf(err.Error())
	}
}
