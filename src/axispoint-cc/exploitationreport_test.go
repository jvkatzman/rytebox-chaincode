package main

// ********************************* Mock Data *********************************
var exploitationReportSingle_in = `[{"source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99000000,"usageType":"SDIGM","territory":"AUS","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff"}]`
var exploitationReportSingle_out = `{"docType":"EXPLOITATIONREPORT","source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99,"usageType":"SDIGM","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","territory":"AUS","state":"UNKOWN_ISRC"}`

var exploitationReportMultiple_in = `[{"source": "P8819H","songTitle": "GECKOS!!","writerName": "\"KITTY WHITE, KIERAN CASH\"","isrc":"00055524","units":164,"exploitationDate":"20170131","amount":22.00000000,"usageType":"SMECH","territory":"AUS","exploitationReportUUID":"03c97ae0-950a-37cd-a1f2-c2b0afc728e7"},{"source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99000000,"usageType":"SDIGM","territory":"AUS","exploitationReportUUID":"095cb0b1-2aec-360b-9dd1-ce1d023286e1"}]`
var exploitationReportMultiple_out1 = `{"docType":"EXPLOITATIONREPORT","source":"P8819H","songTitle":"GECKOS!!","writerName":"\"KITTY WHITE, KIERAN CASH\"","isrc":"00055524","units":164,"exploitationDate":"20170131","amount":22,"usageType":"SMECH","exploitationReportUUID":"03c97ae0-950a-37cd-a1f2-c2b0afc728e7","territory":"AUS","state":"UNKOWN_ISRC"}`
var exploitationReportMultiple_out2 = `{"docType":"EXPLOITATIONREPORT","source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99,"usageType":"SDIGM","exploitationReportUUID":"095cb0b1-2aec-360b-9dd1-ce1d023286e1","territory":"AUS","state":"UNKOWN_ISRC"}`

var exploitationReportSingle_update = `[{"source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99000000,"usageType":"SDIGM","territory":"AUS","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","state":"UNKOWN_ISRC"}]`

// *****************************************************************************
func MockGetExploitationReportResponse(functionName string) []byte {
	switch functionName {
	case "Test_AddExploitationReports_Single":
		return []byte(`{"successCount":1,"failureCount":0,"exploitationReports":[],"royaltyStatements":[]}`)
	case "Test_AddExploitationReports_Single_AlreadyExists":
		return []byte(`{"successCount":0,"failureCount":1,"exploitationReports":[{"exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","message":"Exploitation Report already exists!","success":false}],"royaltyStatements":[]}`)
	case "Test_AddExploitationReports_Multiple":
		return []byte(`{"successCount":2,"failureCount":0,"exploitationReports":[],"royaltyStatements":[]}`)
	case "Test_GetExploitationReports":
		return []byte(`[{"docType":"EXPLOITATIONREPORT","source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99,"usageType":"SDIGM","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","territory":"AUS","state":"INITIAL"}]`)
	case "Test_GetExploitationReportByUUID":
		return []byte(`{"docType":"EXPLOITATIONREPORT","source":"P8819H","songTitle":"HOLD THE LINE","writerName":"DAVID PAICH","isrc":"00029521","units":203,"exploitationDate":"20170131","amount":32.99,"usageType":"SDIGM","exploitationReportUUID":"1cfbdb47-cca7-3eca-b73e-0d6c478a4eff","territory":"AUS","state":"UNKOWN_ISRC"}`)
	case "Test_GetExploitationReportByUUID_Failure":
		return []byte(`{"status":"500","message":"UUID: 1cfbdb47-cca7-3eca-b73e-0d6c478a4efg does not exist"}`)
	case "Test_UpdateExploitationReports_Single":
		return []byte(`{"successCount":1,"failureCount":0,"exploitationReports":[]}`)
	default:
		return []byte("[]")
	}
}

// func Test_AddExploitationReports_Single(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	// Check State for Transaction
// 	var exploitationReportUUID = "1cfbdb47-cca7-3eca-b73e-0d6c478a4eff"
// 	checkState(t, stub, exploitationReportUUID, exploitationReportSingle_out)

// 	expected := MockGetExploitationReportResponse("Test_AddExploitationReports_Single")
// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// func Test_AddExploitationReports_Single_AlreadyExists(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

// 	// Add Exploitation Report
// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	expected := MockGetExploitationReportResponse("Test_AddExploitationReports_Single_AlreadyExists")
// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// func Test_AddExploitationReports_Multiple(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportMultiple_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	// Check State for first Exploitation Report
// 	var exploitationReportUUID = "03c97ae0-950a-37cd-a1f2-c2b0afc728e7"
// 	checkState(t, stub, exploitationReportUUID, exploitationReportMultiple_out1)

// 	// Check State for second Exploitation Report
// 	exploitationReportUUID = "095cb0b1-2aec-360b-9dd1-ce1d023286e1"
// 	checkState(t, stub, exploitationReportUUID, exploitationReportMultiple_out2)

// 	expected := MockGetExploitationReportResponse("Test_AddExploitationReports_Multiple")
// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// //Test the Edge cases
// func Test_AddExploitationReports_Empty1(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(`[]`)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}
// }

// //Test the Edge cases
// func Test_AddExploitationReports_Empty2(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)

// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte("")})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}
// }

// //Test the Edge cases
// func Test_GetExploitationReports(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)
// 	getExploitationReportsForQueryString = MockGetExploitationReportQueryResultForQueryString

// 	queryString := fmt.Sprintf("{\"selector\":{\"isrc\":\"%s\"}}", "00029521")

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("getExploitationReports"), []byte(queryString)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	expected := MockGetExploitationReportResponse("Test_GetExploitationReports")

// 	fmt.Println(string(actual))
// 	fmt.Println(string(expected))

// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// //Test the Edge cases
// func Test_GetExploitationReportByUUID(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)
// 	// Add Exploitation Report
// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("getAssetByUUID"), []byte("1cfbdb47-cca7-3eca-b73e-0d6c478a4eff")})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	expected := MockGetExploitationReportResponse("Test_GetExploitationReportByUUID")

// 	fmt.Println(string(actual))
// 	fmt.Println(string(expected))

// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// //Test the Edge cases
// func Test_GetExploitationReportByUUID_Failure(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)
// 	// Add Exploitation Report
// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("getAssetByUUID"), []byte("1cfbdb47-cca7-3eca-b73e-0d6c478a4efg")})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	expected := MockGetExploitationReportResponse("Test_GetExploitationReportByUUID_Failure")

// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }

// func Test_UpdateExploitationReports_Single(t *testing.T) {
// 	scc := new(AxispointChaincode)
// 	stub := shim.NewMockStub("AxispointChaincode", scc)

// 	// Init
// 	checkInit(t, stub, [][]byte{[]byte("init"), []byte("")}, nil)
// 	// Add Exploitation Report
// 	_, err := checkInvoke(t, stub, [][]byte{[]byte("addExploitationReports"), []byte(exploitationReportSingle_in)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	actual, err := checkInvoke(t, stub, [][]byte{[]byte("updateExploitationReports"), []byte(exploitationReportSingle_update)})
// 	if err != nil {
// 		t.Fatalf(err.Error())
// 	}

// 	// Check State for Transaction
// 	var exploitationReportUUID = "1cfbdb47-cca7-3eca-b73e-0d6c478a4eff"
// 	checkState(t, stub, exploitationReportUUID, exploitationReportSingle_out)

// 	expected := MockGetExploitationReportResponse("Test_UpdateExploitationReports_Single")
// 	if !reflect.DeepEqual(expected, actual) {
// 		t.Fatalf("Actual response is not equal to expected response")
// 	}
// }
