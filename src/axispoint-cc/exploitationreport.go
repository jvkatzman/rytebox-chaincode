package main

import (
	"github.com/Knetic/govaluate"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

// AddExploitationReports function contains business logic to insert new
// Exploitation Reports to the Ledger
/*
* @params   {Array} args
* @property {string} 0       - stringified JSON array of exploitation report.
* @return   {pb.Response}    - peer Response
 */
func addExploitationReports(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var methodName = "addExploitationReports"
	logger.Info("ENTERING >", methodName, args)

	type ExploitationReportResponse struct {
		ExploitationReportUUID string `json:"exploitationReportUUID"`
		Message                string `json:"message"`
		Success                bool   `json:"success"`
	}

	type ExploitationReportOutput struct {
		SuccessCount        int                          `json:"successCount"`
		FailureCount        int                          `json:"failureCount"`
		ExploitationReports []ExploitationReportResponse `json:"exploitationReports"`
	}

	//Check if array length is greater than 0
	if len(args) < 1 {
		return getErrorResponse("Missing arguments: Array of Exploitation Report objects is required")
	}

	exploitationReportOutput := ExploitationReportOutput{}
	exploitationReports := &[]ExploitationReport{}
	exploitationReportResponses := []ExploitationReportResponse{}

	//Unmarshal the args input to an array of exploitation report records
	err := jsonToObject([]byte(args[0]), exploitationReports)
	if err != nil {
		return getErrorResponse(err.Error())
	}

	// Iterate over Exploitation Reports
	for _, exploitationReport := range *exploitationReports {
		parameters := make(map[string]interface{}, 8)
		parameters["exploitationReport"] = exploitationReport

		expression, err := govaluate.NewEvaluableExpression("exploitationReport.Isrc == '00055524'")
		result, err := expression.Evaluate(parameters)
		logger.Info("exploitationReport.Isrc == '00055524' >>>>", exploitationReport.Isrc, ">>>>>>.", result)

		expression, err = govaluate.NewEvaluableExpression("exploitationReport.Isrc in ('00055524','00055624')")
		result, err = expression.Evaluate(parameters)
		logger.Info("exploitationReport.Isrc in ('00055524','00055624') >>>>", exploitationReport.Isrc, ">>>>>>.", result)

		expression, err = govaluate.NewEvaluableExpression("exploitationReport.Isrc nin ('00055524','00055624')")
		result, err = expression.Evaluate(parameters)
		logger.Info("exploitationReport.Isrc nin ('00055524','00055624') >>>>", exploitationReport.Isrc, ">>>>>>.", result)

		exploitationReport.DocType = EXPLOITATIONREPORT
		exploitationReportResponse := ExploitationReportResponse{}
		exploitationReportResponse.ExploitationReportUUID = exploitationReport.ExploitationReportUUID
		exploitationReportResponse.Success = true

		//Record Exploitation Report on ledger
		exploitationReportBytes, err := objectToJSON(exploitationReport)
		if err != nil {
			exploitationReportResponse.Success = false
			exploitationReportResponse.Message = err.Error()
			exploitationReportResponses = append(exploitationReportResponses, exploitationReportResponse)
			exploitationReportOutput.FailureCount++
			continue
		}

		err = stub.PutState(exploitationReport.ExploitationReportUUID, exploitationReportBytes)
		if err != nil {
			exploitationReportResponse.Success = false
			exploitationReportResponse.Message = err.Error()
		}

		if exploitationReportResponse.Success {
			exploitationReportOutput.SuccessCount++
		} else {
			exploitationReportResponses = append(exploitationReportResponses, exploitationReportResponse)
			exploitationReportOutput.FailureCount++
		}
	}

	exploitationReportOutput.ExploitationReports = exploitationReportResponses

	objBytes, _ := objectToJSON(exploitationReportOutput)
	logger.Info("EXITING <", methodName, exploitationReportOutput)
	return shim.Success(objBytes)
}
