package main

import (
	"encoding/json"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

// AddExploitationReports function contains business logic to insert new
// Exploitation Reports to the Ledger
/*
* @params   {Array} args
* @property {string} 0       - stringified JSON array of exploitation report.
* @return   {pb.Response}    - peer Response
 */
func AddExploitationReports(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	logger.Infof("Enter:AddExploitationReports args: %v", args)
	//Check if array length is greater than 0
	if len(args) < 1 {
		return shim.Error("Array should have at least one element")
	}

	//Unmarshall the args input to an array of exploitation report records
	exploitationReportsList := []ExploitationReport{}
	err := json.Unmarshal([]byte(args[0]), &exploitationReportsList)

	if err != nil {
		return shim.Error("Error Unmarshalling a batch of Exploitation Reports : " + err.Error())
	}

	//Iterate to commit each exploitation report record to the ledger
	for i := 0; i < len(exploitationReportsList); i++ {
		exploitationReport := exploitationReportsList[i]
		key := exploitationReport.ExploitationReportUUID
		byteVal, _ := json.Marshal(exploitationReport)

		err = stub.PutState(key, byteVal)
		if err != nil {
			return shim.Error("Error Committing Exploitation Report for key: " + key)
		}
	}

	logger.Infof("Exit:AddExploitationReports")
	return shim.Success(nil)
}
